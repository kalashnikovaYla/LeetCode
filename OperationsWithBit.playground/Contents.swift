
//MARK: - И (AND): `&
///Используется для установки битов на 1, только если они равны 1 в обоих операндах.

let a: UInt8 = 0b1100_1100
let b: UInt8 = 0b1010_1010
let resultAnd = a & b // Результат: 0b1000_1000


//MARK: - *ИЛИ (OR)*: `|`
///Используется для установки битов на 1, если хотя бы один из операндов равен 1.

let resultOr = a | b // Результат: 0b1110_1110

//MARK: -  *Исключающее ИЛИ (XOR)*: `^

///Используется для установки битов на 1, если только один из операндов равен 1.
let resultXOR = a ^ b // Результат: 0b0110_0110


//MARK: - Негувирование (NOT): `~`

///Возвращает побитовый инверс (негатив) значения.

let resultNot = ~a // Результат: 0b0011_0011 (в зависимости от количества бит)

//MARK: - Сдвиг влево: `<<`
///Сдвигает биты влево на заданное количество позиций. Это эквивалентно умножению числа на 2 в степени сдвига.

let resultLeft = a << 2 // Результат: 0b0011_0010_0000

//MARK: - Сдвиг вправо: `>>`
///Сдвигает биты вправо на заданное количество позиций. Это эквивалентно целочисленному делению на 2 в степени сдвига.

let resultRight = a >> 2 // Результат: 0b0011_0000


//Установка флага
var flags: UInt8 = 0b0000_0000
flags |= 0b0000_0001 // Устанавливаем первый флаг

//Сброс флага
flags &= ~0b0000_0001 // Сбрасываем первый флаг

// Проверка флага
if flags & 0b0000_0001 != 0 {
    print("Первый флаг установлен")
} else {
    print("Первый флаг не установлен")
}
