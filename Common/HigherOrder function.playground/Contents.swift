import Foundation


let numbers = [1, 2, 3, 4]

///*map*: Применяет заданную функцию ко всем элементам массива и возвращает новый массив, состоящий из результатов применения этой функции.

let squares = numbers.map {
    $0 * $0
} // [1, 4, 9, 16]


///*filter*: Удаляет из массива элементы, не соответствующие заданному условию, и возвращает новый массив, содержащий только подходящие элементы.

let evenNumbers = numbers.filter {
    $0 % 2 == 0
}

///*reduce*: Сводит все элементы массива к одному значению, применяя функцию к элементам массива и аккумулятору.
let sum = numbers.reduce(0, +)

///*forEach*: Применяет заданную функцию ко всем элементам массива, но не возвращает новый массив
numbers.forEach {
    print($0)
}

///*sorted*: Сортирует элементы массива на основе заданной функции сравнения.

let sortedNumbers = numbers.sorted(by: >) // [4, 3, 2, 1]

/// *flatMap*: Применяет функцию к каждому элементу массива и объединяет результаты в один массив. В Swift 5 это также может использоваться для работы с опциональными значениями.

let nestedArray = [[1, 2, 3], [4, 5]]
let flatArray = nestedArray.flatMap { $0 } // [1, 2, 3, 4, 5]

///*compactMap*: Применяет функцию к каждому элементу массива и возвращает массив непустых значений
let values = ["1", "2", "three", "4"]
let numbersFromStrings = values.compactMap { Int($0) } // [1, 2, 4]
